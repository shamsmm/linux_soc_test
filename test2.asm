# RV32I Assembly for GPIO Blink and Read
# Generated by: Claude (Anthropic)
# Date: June 5, 2025
# Target: SiFive-compatible GPIO at 0x30000000
# Pin 7 (8th pin): Output - Blink LED
# Pin 1 (2nd pin): Input - Read button/switch
#
# This assembly code was generated by Claude, an AI assistant created by Anthropic.
# The code implements GPIO control for an RV32I RISC-V processor with SiFive-compatible
# peripheral registers for educational and development purposes.

.section .text
.global _start

# GPIO Register Offsets (SiFive FE310 compatible)
.equ GPIO_BASE,     0x30000000
.equ GPIO_INPUT,    0x00    # Input value register
.equ GPIO_OUTPUT_EN,   0x08    # Output value register  
.equ GPIO_OUTPUT, 0x0C   # Output enable register
.equ GPIO_PUE,      0x10    # Pull-up enable register
.equ GPIO_IOFSEL,   0x38    # I/O function select (0=GPIO, 1=alternate)

# Pin definitions
.equ PIN_INPUT,     1       # Pin 1 for input (bit 1)
.equ PIN_OUTPUT,    7       # Pin 7 for output (bit 7)
.equ PIN_INPUT_MASK,  (1 << PIN_INPUT)
.equ PIN_OUTPUT_MASK, (1 << PIN_OUTPUT)

# Delay count for blinking
.equ DELAY_COUNT,   0x10

_start:
    # Load GPIO base address
    lui t0, %hi(GPIO_BASE)
    addi t0, t0, %lo(GPIO_BASE)
    
    # Configure GPIO pins
    # Set pin 7 as output, pin 1 as input
    li t1, PIN_OUTPUT_MASK
    sw t1, GPIO_OUTPUT_EN(t0)       # Enable output on pin 7
    
    # Configure I/O function select (set to GPIO mode)
    li t1, 0x00                     # All pins as GPIO (not alternate function)
    sw t1, GPIO_IOFSEL(t0)
    
    # Enable pull-up on input pin 1
    li t1, PIN_INPUT_MASK
    sw t1, GPIO_PUE(t0)

main_loop:
    # Read input pin 1
    lw t2, GPIO_INPUT(t0)           # Read input register
    andi t3, t2, PIN_INPUT_MASK     # Mask pin 1
    
    # Check if input pin is pressed (assuming active low)
    beqz t3, input_pressed          # Branch if pin 1 is low
    
    # Input not pressed - normal blink
    j normal_blink
    
input_pressed:
    # Input pressed - fast blink
    li a0, (DELAY_COUNT >> 1)       # Faster blink when input pressed
    j do_blink
    
normal_blink:
    li a0, DELAY_COUNT              # Normal blink speed
    
do_blink:
    # Turn on LED (pin 7)
    li t1, PIN_OUTPUT_MASK
    sw t1, GPIO_OUTPUT(t0)
    
    # Delay
    mv t4, a0
delay_on:
    addi t4, t4, -1
    bnez t4, delay_on
    
    # Turn off LED (pin 7)
    li t1, 0
    sw t1, GPIO_OUTPUT(t0)
    
    # Delay
    mv t4, a0
delay_off:
    addi t4, t4, -1
    bnez t4, delay_off
    
    # Repeat main loop
    j main_loop